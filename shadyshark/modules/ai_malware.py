import random
import base64
import hashlib
import logging

LOG_FILE = "logs/ai_malware.log"
logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


class PolymorphicMalware:
    """
    KI-gest√ºtzte Malware-Simulation mit automatischer Code-Verschleierung & dynamischer Anpassung.
    """

    def __init__(self):
        self.mutation_count = 0

    def generate_payload(self):
        """
        Erstellt eine polymorphe Nutzlast durch zuf√§llige Code-Verschleierung.
        """
        logging.info("üöÄ Generiere polymorphe Nutzlast...")

        payload_variants = [
            "import os; os.system('whoami')",
            "import subprocess; subprocess.call(['whoami'])",
            "import platform; print(platform.system())"
        ]
        chosen_payload = random.choice(payload_variants)

        # Base64-Obfuskation
        encoded_payload = base64.b64encode(chosen_payload.encode()).decode()
        obfuscated_code = f"import base64; exec(base64.b64decode('{encoded_payload}').decode())"

        self.mutation_count += 1
        hash_value = hashlib.md5(obfuscated_code.encode()).hexdigest()
        logging.info(f"üîÑ Mutation #{self.mutation_count}: {hash_value}")
        return obfuscated_code

    def evade_antivirus(self, payload):
        """
        Ver√§ndert den Code automatisch, um signaturbasierte AV-Erkennung zu umgehen.
        """
        obfuscation_methods = [
            lambda x: x.replace("exec", "eval"),
            lambda x: x.replace("import", "import "),
            lambda x: "".join(random.sample(x, len(x)))  # Zuf√§llige Permutation
        ]
        evasion_technique = random.choice(obfuscation_methods)

        try:
            mutated_payload = evasion_technique(payload)
            logging.info("üõ°Ô∏è Antivirus-Evasion angewendet.")
            return mutated_payload
        except Exception as e:
            logging.error(f"‚ùå Fehler bei der Obfuskation: {e}")
            return payload  # Fallback zur Originalversion

    def execute(self):
        """
        Erstellt, verschleiert und gibt den Schadcode zur Analyse aus, anstatt ihn direkt auszuf√ºhren.
        """
        payload = self.generate_payload()
        evasive_payload = self.evade_antivirus(payload)

        logging.info("üî• Schadcode generiert.")
        print("üìú Generierter Code zur Analyse:\n")
        print(evasive_payload)  # Kein `exec()`, nur Ausgabe zur manuellen √úberpr√ºfung


if __name__ == "__main__":
    malware = PolymorphicMalware()
    malware.execute()
